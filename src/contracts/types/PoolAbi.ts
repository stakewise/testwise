/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IPoolValidators {
  export type DepositDataStruct = {
    operator: PromiseOrValue<string>;
    withdrawalCredentials: PromiseOrValue<BytesLike>;
    depositDataRoot: PromiseOrValue<BytesLike>;
    publicKey: PromiseOrValue<BytesLike>;
    signature: PromiseOrValue<BytesLike>;
  };

  export type DepositDataStructOutput = [
    string,
    string,
    string,
    string,
    string
  ] & {
    operator: string;
    withdrawalCredentials: string;
    depositDataRoot: string;
    publicKey: string;
    signature: string;
  };
}

export interface PoolAbiInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "PAUSER_ROLE()": FunctionFragment;
    "VALIDATOR_INIT_DEPOSIT()": FunctionFragment;
    "VALIDATOR_TOTAL_DEPOSIT()": FunctionFragment;
    "activate(address,uint256)": FunctionFragment;
    "activateMultiple(address,uint256[])": FunctionFragment;
    "activatedValidators()": FunctionFragment;
    "activations(address,uint256)": FunctionFragment;
    "addAdmin(address)": FunctionFragment;
    "addPauser(address)": FunctionFragment;
    "canActivate(uint256)": FunctionFragment;
    "finalizeValidator((address,bytes32,bytes32,bytes,bytes))": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initializeValidator((address,bytes32,bytes32,bytes,bytes))": FunctionFragment;
    "isAdmin(address)": FunctionFragment;
    "isPauser(address)": FunctionFragment;
    "minActivatingDeposit()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pendingValidators()": FunctionFragment;
    "pendingValidatorsLimit()": FunctionFragment;
    "refund()": FunctionFragment;
    "removeAdmin(address)": FunctionFragment;
    "removePauser(address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setActivatedValidators(uint256)": FunctionFragment;
    "setMinActivatingDeposit(uint256)": FunctionFragment;
    "setPendingValidatorsLimit(uint256)": FunctionFragment;
    "stake()": FunctionFragment;
    "stakeOnBehalf(address)": FunctionFragment;
    "stakeWithPartner(address)": FunctionFragment;
    "stakeWithPartnerOnBehalf(address,address)": FunctionFragment;
    "stakeWithReferrer(address)": FunctionFragment;
    "stakeWithReferrerOnBehalf(address,address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "upgrade(address,address)": FunctionFragment;
    "validatorRegistration()": FunctionFragment;
    "withdrawalCredentials()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "PAUSER_ROLE"
      | "VALIDATOR_INIT_DEPOSIT"
      | "VALIDATOR_TOTAL_DEPOSIT"
      | "activate"
      | "activateMultiple"
      | "activatedValidators"
      | "activations"
      | "addAdmin"
      | "addPauser"
      | "canActivate"
      | "finalizeValidator"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "grantRole"
      | "hasRole"
      | "initializeValidator"
      | "isAdmin"
      | "isPauser"
      | "minActivatingDeposit"
      | "pause"
      | "paused"
      | "pendingValidators"
      | "pendingValidatorsLimit"
      | "refund"
      | "removeAdmin"
      | "removePauser"
      | "renounceRole"
      | "revokeRole"
      | "setActivatedValidators"
      | "setMinActivatingDeposit"
      | "setPendingValidatorsLimit"
      | "stake"
      | "stakeOnBehalf"
      | "stakeWithPartner"
      | "stakeWithPartnerOnBehalf"
      | "stakeWithReferrer"
      | "stakeWithReferrerOnBehalf"
      | "unpause"
      | "upgrade"
      | "validatorRegistration"
      | "withdrawalCredentials"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VALIDATOR_INIT_DEPOSIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VALIDATOR_TOTAL_DEPOSIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activate",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "activateMultiple",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "activatedValidators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activations",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addPauser",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "canActivate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeValidator",
    values: [IPoolValidators.DepositDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeValidator",
    values: [IPoolValidators.DepositDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "isAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isPauser",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "minActivatingDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingValidators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingValidatorsLimit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "refund", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removePauser",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setActivatedValidators",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinActivatingDeposit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingValidatorsLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "stake", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stakeOnBehalf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeWithPartner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeWithPartnerOnBehalf",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeWithReferrer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeWithReferrerOnBehalf",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "upgrade",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorRegistration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalCredentials",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VALIDATOR_INIT_DEPOSIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VALIDATOR_TOTAL_DEPOSIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "activate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "activateMultiple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activatedValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addPauser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canActivate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPauser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minActivatingDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingValidatorsLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setActivatedValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinActivatingDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingValidatorsLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeOnBehalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeWithPartner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeWithPartnerOnBehalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeWithReferrer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeWithReferrerOnBehalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validatorRegistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalCredentials",
    data: BytesLike
  ): Result;

  events: {
    "Activated(address,uint256,uint256,address)": EventFragment;
    "ActivatedValidatorsUpdated(uint256,address)": EventFragment;
    "ActivationScheduled(address,uint256,uint256)": EventFragment;
    "MinActivatingDepositUpdated(uint256,address)": EventFragment;
    "Paused(address)": EventFragment;
    "PendingValidatorsLimitUpdated(uint256,address)": EventFragment;
    "Refunded(address,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "StakedWithPartner(address,uint256)": EventFragment;
    "StakedWithReferrer(address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "ValidatorInitialized(bytes,address)": EventFragment;
    "ValidatorRegistered(bytes,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Activated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ActivatedValidatorsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ActivationScheduled"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MinActivatingDepositUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PendingValidatorsLimitUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Refunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakedWithPartner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakedWithReferrer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorRegistered"): EventFragment;
}

export interface ActivatedEventObject {
  account: string;
  validatorIndex: BigNumber;
  value: BigNumber;
  sender: string;
}
export type ActivatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  ActivatedEventObject
>;

export type ActivatedEventFilter = TypedEventFilter<ActivatedEvent>;

export interface ActivatedValidatorsUpdatedEventObject {
  activatedValidators: BigNumber;
  sender: string;
}
export type ActivatedValidatorsUpdatedEvent = TypedEvent<
  [BigNumber, string],
  ActivatedValidatorsUpdatedEventObject
>;

export type ActivatedValidatorsUpdatedEventFilter =
  TypedEventFilter<ActivatedValidatorsUpdatedEvent>;

export interface ActivationScheduledEventObject {
  sender: string;
  validatorIndex: BigNumber;
  value: BigNumber;
}
export type ActivationScheduledEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ActivationScheduledEventObject
>;

export type ActivationScheduledEventFilter =
  TypedEventFilter<ActivationScheduledEvent>;

export interface MinActivatingDepositUpdatedEventObject {
  minActivatingDeposit: BigNumber;
  sender: string;
}
export type MinActivatingDepositUpdatedEvent = TypedEvent<
  [BigNumber, string],
  MinActivatingDepositUpdatedEventObject
>;

export type MinActivatingDepositUpdatedEventFilter =
  TypedEventFilter<MinActivatingDepositUpdatedEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PendingValidatorsLimitUpdatedEventObject {
  pendingValidatorsLimit: BigNumber;
  sender: string;
}
export type PendingValidatorsLimitUpdatedEvent = TypedEvent<
  [BigNumber, string],
  PendingValidatorsLimitUpdatedEventObject
>;

export type PendingValidatorsLimitUpdatedEventFilter =
  TypedEventFilter<PendingValidatorsLimitUpdatedEvent>;

export interface RefundedEventObject {
  sender: string;
  amount: BigNumber;
}
export type RefundedEvent = TypedEvent<
  [string, BigNumber],
  RefundedEventObject
>;

export type RefundedEventFilter = TypedEventFilter<RefundedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface StakedWithPartnerEventObject {
  partner: string;
  amount: BigNumber;
}
export type StakedWithPartnerEvent = TypedEvent<
  [string, BigNumber],
  StakedWithPartnerEventObject
>;

export type StakedWithPartnerEventFilter =
  TypedEventFilter<StakedWithPartnerEvent>;

export interface StakedWithReferrerEventObject {
  referrer: string;
  amount: BigNumber;
}
export type StakedWithReferrerEvent = TypedEvent<
  [string, BigNumber],
  StakedWithReferrerEventObject
>;

export type StakedWithReferrerEventFilter =
  TypedEventFilter<StakedWithReferrerEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface ValidatorInitializedEventObject {
  publicKey: string;
  operator: string;
}
export type ValidatorInitializedEvent = TypedEvent<
  [string, string],
  ValidatorInitializedEventObject
>;

export type ValidatorInitializedEventFilter =
  TypedEventFilter<ValidatorInitializedEvent>;

export interface ValidatorRegisteredEventObject {
  publicKey: string;
  operator: string;
}
export type ValidatorRegisteredEvent = TypedEvent<
  [string, string],
  ValidatorRegisteredEventObject
>;

export type ValidatorRegisteredEventFilter =
  TypedEventFilter<ValidatorRegisteredEvent>;

export interface PoolAbi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PoolAbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    VALIDATOR_INIT_DEPOSIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    VALIDATOR_TOTAL_DEPOSIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    activate(
      account: PromiseOrValue<string>,
      validatorIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    activateMultiple(
      account: PromiseOrValue<string>,
      validatorIndexes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    activatedValidators(overrides?: CallOverrides): Promise<[BigNumber]>;

    activations(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    addAdmin(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addPauser(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    canActivate(
      validatorIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    finalizeValidator(
      depositData: IPoolValidators.DepositDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initializeValidator(
      depositData: IPoolValidators.DepositDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isAdmin(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPauser(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    minActivatingDeposit(overrides?: CallOverrides): Promise<[BigNumber]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pendingValidators(overrides?: CallOverrides): Promise<[BigNumber]>;

    pendingValidatorsLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    refund(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeAdmin(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removePauser(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setActivatedValidators(
      newActivatedValidators: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinActivatingDeposit(
      newMinActivatingDeposit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPendingValidatorsLimit(
      newPendingValidatorsLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stake(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakeOnBehalf(
      recipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakeWithPartner(
      partner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakeWithPartnerOnBehalf(
      partner: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakeWithReferrer(
      referrer: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakeWithReferrerOnBehalf(
      referrer: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgrade(
      _poolValidators: PromiseOrValue<string>,
      _oracles: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validatorRegistration(overrides?: CallOverrides): Promise<[string]>;

    withdrawalCredentials(overrides?: CallOverrides): Promise<[string]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

  VALIDATOR_INIT_DEPOSIT(overrides?: CallOverrides): Promise<BigNumber>;

  VALIDATOR_TOTAL_DEPOSIT(overrides?: CallOverrides): Promise<BigNumber>;

  activate(
    account: PromiseOrValue<string>,
    validatorIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  activateMultiple(
    account: PromiseOrValue<string>,
    validatorIndexes: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  activatedValidators(overrides?: CallOverrides): Promise<BigNumber>;

  activations(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  addAdmin(
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addPauser(
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  canActivate(
    validatorIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  finalizeValidator(
    depositData: IPoolValidators.DepositDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMember(
    role: PromiseOrValue<BytesLike>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initializeValidator(
    depositData: IPoolValidators.DepositDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isAdmin(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPauser(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  minActivatingDeposit(overrides?: CallOverrides): Promise<BigNumber>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pendingValidators(overrides?: CallOverrides): Promise<BigNumber>;

  pendingValidatorsLimit(overrides?: CallOverrides): Promise<BigNumber>;

  refund(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeAdmin(
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removePauser(
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setActivatedValidators(
    newActivatedValidators: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinActivatingDeposit(
    newMinActivatingDeposit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPendingValidatorsLimit(
    newPendingValidatorsLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stake(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakeOnBehalf(
    recipient: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakeWithPartner(
    partner: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakeWithPartnerOnBehalf(
    partner: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakeWithReferrer(
    referrer: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakeWithReferrerOnBehalf(
    referrer: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgrade(
    _poolValidators: PromiseOrValue<string>,
    _oracles: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validatorRegistration(overrides?: CallOverrides): Promise<string>;

  withdrawalCredentials(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

    VALIDATOR_INIT_DEPOSIT(overrides?: CallOverrides): Promise<BigNumber>;

    VALIDATOR_TOTAL_DEPOSIT(overrides?: CallOverrides): Promise<BigNumber>;

    activate(
      account: PromiseOrValue<string>,
      validatorIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    activateMultiple(
      account: PromiseOrValue<string>,
      validatorIndexes: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    activatedValidators(overrides?: CallOverrides): Promise<BigNumber>;

    activations(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addAdmin(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addPauser(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    canActivate(
      validatorIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    finalizeValidator(
      depositData: IPoolValidators.DepositDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initializeValidator(
      depositData: IPoolValidators.DepositDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    isAdmin(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPauser(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    minActivatingDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pendingValidators(overrides?: CallOverrides): Promise<BigNumber>;

    pendingValidatorsLimit(overrides?: CallOverrides): Promise<BigNumber>;

    refund(overrides?: CallOverrides): Promise<void>;

    removeAdmin(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removePauser(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setActivatedValidators(
      newActivatedValidators: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinActivatingDeposit(
      newMinActivatingDeposit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPendingValidatorsLimit(
      newPendingValidatorsLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(overrides?: CallOverrides): Promise<void>;

    stakeOnBehalf(
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeWithPartner(
      partner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeWithPartnerOnBehalf(
      partner: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeWithReferrer(
      referrer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeWithReferrerOnBehalf(
      referrer: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    upgrade(
      _poolValidators: PromiseOrValue<string>,
      _oracles: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    validatorRegistration(overrides?: CallOverrides): Promise<string>;

    withdrawalCredentials(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Activated(address,uint256,uint256,address)"(
      account?: PromiseOrValue<string> | null,
      validatorIndex?: null,
      value?: null,
      sender?: PromiseOrValue<string> | null
    ): ActivatedEventFilter;
    Activated(
      account?: PromiseOrValue<string> | null,
      validatorIndex?: null,
      value?: null,
      sender?: PromiseOrValue<string> | null
    ): ActivatedEventFilter;

    "ActivatedValidatorsUpdated(uint256,address)"(
      activatedValidators?: null,
      sender?: null
    ): ActivatedValidatorsUpdatedEventFilter;
    ActivatedValidatorsUpdated(
      activatedValidators?: null,
      sender?: null
    ): ActivatedValidatorsUpdatedEventFilter;

    "ActivationScheduled(address,uint256,uint256)"(
      sender?: PromiseOrValue<string> | null,
      validatorIndex?: null,
      value?: null
    ): ActivationScheduledEventFilter;
    ActivationScheduled(
      sender?: PromiseOrValue<string> | null,
      validatorIndex?: null,
      value?: null
    ): ActivationScheduledEventFilter;

    "MinActivatingDepositUpdated(uint256,address)"(
      minActivatingDeposit?: null,
      sender?: null
    ): MinActivatingDepositUpdatedEventFilter;
    MinActivatingDepositUpdated(
      minActivatingDeposit?: null,
      sender?: null
    ): MinActivatingDepositUpdatedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "PendingValidatorsLimitUpdated(uint256,address)"(
      pendingValidatorsLimit?: null,
      sender?: null
    ): PendingValidatorsLimitUpdatedEventFilter;
    PendingValidatorsLimitUpdated(
      pendingValidatorsLimit?: null,
      sender?: null
    ): PendingValidatorsLimitUpdatedEventFilter;

    "Refunded(address,uint256)"(
      sender?: PromiseOrValue<string> | null,
      amount?: null
    ): RefundedEventFilter;
    Refunded(
      sender?: PromiseOrValue<string> | null,
      amount?: null
    ): RefundedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "StakedWithPartner(address,uint256)"(
      partner?: PromiseOrValue<string> | null,
      amount?: null
    ): StakedWithPartnerEventFilter;
    StakedWithPartner(
      partner?: PromiseOrValue<string> | null,
      amount?: null
    ): StakedWithPartnerEventFilter;

    "StakedWithReferrer(address,uint256)"(
      referrer?: PromiseOrValue<string> | null,
      amount?: null
    ): StakedWithReferrerEventFilter;
    StakedWithReferrer(
      referrer?: PromiseOrValue<string> | null,
      amount?: null
    ): StakedWithReferrerEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "ValidatorInitialized(bytes,address)"(
      publicKey?: null,
      operator?: null
    ): ValidatorInitializedEventFilter;
    ValidatorInitialized(
      publicKey?: null,
      operator?: null
    ): ValidatorInitializedEventFilter;

    "ValidatorRegistered(bytes,address)"(
      publicKey?: null,
      operator?: null
    ): ValidatorRegisteredEventFilter;
    ValidatorRegistered(
      publicKey?: null,
      operator?: null
    ): ValidatorRegisteredEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    VALIDATOR_INIT_DEPOSIT(overrides?: CallOverrides): Promise<BigNumber>;

    VALIDATOR_TOTAL_DEPOSIT(overrides?: CallOverrides): Promise<BigNumber>;

    activate(
      account: PromiseOrValue<string>,
      validatorIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    activateMultiple(
      account: PromiseOrValue<string>,
      validatorIndexes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    activatedValidators(overrides?: CallOverrides): Promise<BigNumber>;

    activations(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addAdmin(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addPauser(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    canActivate(
      validatorIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finalizeValidator(
      depositData: IPoolValidators.DepositDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initializeValidator(
      depositData: IPoolValidators.DepositDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isAdmin(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPauser(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minActivatingDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pendingValidators(overrides?: CallOverrides): Promise<BigNumber>;

    pendingValidatorsLimit(overrides?: CallOverrides): Promise<BigNumber>;

    refund(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeAdmin(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removePauser(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setActivatedValidators(
      newActivatedValidators: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinActivatingDeposit(
      newMinActivatingDeposit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPendingValidatorsLimit(
      newPendingValidatorsLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stake(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakeOnBehalf(
      recipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakeWithPartner(
      partner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakeWithPartnerOnBehalf(
      partner: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakeWithReferrer(
      referrer: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakeWithReferrerOnBehalf(
      referrer: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgrade(
      _poolValidators: PromiseOrValue<string>,
      _oracles: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validatorRegistration(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalCredentials(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VALIDATOR_INIT_DEPOSIT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VALIDATOR_TOTAL_DEPOSIT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    activate(
      account: PromiseOrValue<string>,
      validatorIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    activateMultiple(
      account: PromiseOrValue<string>,
      validatorIndexes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    activatedValidators(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    activations(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addAdmin(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addPauser(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    canActivate(
      validatorIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finalizeValidator(
      depositData: IPoolValidators.DepositDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initializeValidator(
      depositData: IPoolValidators.DepositDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isAdmin(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPauser(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minActivatingDeposit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingValidators(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingValidatorsLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    refund(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeAdmin(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removePauser(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setActivatedValidators(
      newActivatedValidators: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinActivatingDeposit(
      newMinActivatingDeposit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPendingValidatorsLimit(
      newPendingValidatorsLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakeOnBehalf(
      recipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakeWithPartner(
      partner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakeWithPartnerOnBehalf(
      partner: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakeWithReferrer(
      referrer: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakeWithReferrerOnBehalf(
      referrer: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgrade(
      _poolValidators: PromiseOrValue<string>,
      _oracles: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validatorRegistration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawalCredentials(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
